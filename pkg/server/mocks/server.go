// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/server/server.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockReponser is a mock of Reponser interface.
type MockReponser[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockReponserMockRecorder[T]
}

// MockReponserMockRecorder is the mock recorder for MockReponser.
type MockReponserMockRecorder[T any] struct {
	mock *MockReponser[T]
}

// NewMockReponser creates a new mock instance.
func NewMockReponser[T any](ctrl *gomock.Controller) *MockReponser[T] {
	mock := &MockReponser[T]{ctrl: ctrl}
	mock.recorder = &MockReponserMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReponser[T]) EXPECT() *MockReponserMockRecorder[T] {
	return m.recorder
}

// Message mocks base method.
func (m *MockReponser[T]) Message(arg0 T) T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Message", arg0)
	ret0, _ := ret[0].(T)
	return ret0
}

// Message indicates an expected call of Message.
func (mr *MockReponserMockRecorder[T]) Message(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockReponser[T])(nil).Message), arg0)
}
